@use "sass:color";
@use "sass:math";

@use "../global/breakpoints" as *;
@use "../global/colors" as *;
@use "../global/font" as *;
@use "../global/border" as *;
@use "../global/opacity" as *;
@use "../global/spacing" as *;
@use "../global/grid" as *;

// class for colors
:root {
  @each $key, $value in $pallete {
    --clr-#{$key}: #{$value};
  }
}

// class for font family
:root {
  @each $key, $value in $font-family {
    --ff-#{$key}: #{$value};
  }
}

// class for spacing | optional
:root {
  @each $key, $value in $spacing {
    --spacing-#{$key}: #{$value};
  }
}

// class for font weight
@each $key, $value in $font-weight {
  .fw-#{$value} {
    font-weight: #{$value};
  }
}

// class for text / background color
@each $key, $value in $pallete {
  .text-#{$key} {
    color: #{$value};
  }

  .bg-#{$key} {
    background-color: #{$value};
  }
}

// class for border radius
@each $key, $value in $border-radius {
  .rounded-#{$key} {
    border-radius: #{$value};
  }
}

// class for opacity
@each $key, $value in $opacity {
  .opacity-#{$key} {
    opacity: #{$value};
  }
}

// set and default class row and col first
.row {
  display: flex;
  flex-flow: row wrap;

  .col {
    width: 100%;
  }
}

// class for grid gap
@each $key, $value in $gap {
  @each $bps, $bp in $grid-breakpoints {
    @media (min-width: $bp) {
      .g-#{$bps}-#{$key} {
        margin-inline: -#{$value};

        & > .col {
          padding: #{$value};
        }
      }

      .gy-#{$bps}-#{$key} {
        & > .col {
          padding-block: #{$value};
        }
      }
    }
  }
}

// class for grid system
@each $key, $value in $grid-breakpoints {
  @media (min-width: $value) {
    @for $i from 1 through $columns {
      .row-#{$key}-#{$i} {
        & > .col {
          flex-grow: 0;
          width: math.div(100%, $i);
        }
      }
    }
  }
}

// class for col width
@each $key, $value in $grid-breakpoints {
  @media (min-width: $value) {
    @for $i from 1 through $columns {
      .col-#{$key}-#{$i} {
        flex-grow: 0;
        width: math.div($i * 100%, $columns);
      }
    }
  }
}

// class for button actions
@each $key, $value in $pallete {
  .btn-#{$key} {
    $focus-color: color.mix(#ffffff, $value, 50%);
    $hover-color: color.mix(#111111, $value, 5%);

    background-color: #{$value};

    &:hover {
      background-color: $hover-color;
    }

    &:focus-within {
      box-shadow: 0 0 0 3px $focus-color;
    }
  }
}
